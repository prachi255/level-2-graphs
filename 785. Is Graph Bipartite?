 public class pair{
        int v;
        int c;
        pair(int v,int c){
            this.v=v;
            this.c=c;
        }
    }
    public boolean isBipartite(int[][] graph) {
//         int vts=graph.length;
//         //we will fill level in visited
//         int[]vis=new int[vts];
//         Arrays.fill(vis,-1);
        
//         //checking for all comp to be bipartite or non
//         for(int i=0;i<vts;i++){
//             if(vis[i]==-1){
//                 boolean isbipartite=check(vis,graph,i);
//                 if(isbipartite==false){
//                     return false;
//                 }
//             }
//         }
//         return true;
         int vts=graph.length;
        int[]vis=new int[vts];
        Arrays.fill(vis,0);
        for(int i=0;i<vts;i++){
            if(vis[i]==0){
               boolean ans= traverse(i,graph,vis);
                if(ans==false){
                    return false;
                }
            }
        }
        
        return true;
        
    }
    
    public boolean traverse(int src,int[][]graph,int[]vis){
        
        ArrayDeque<pair> q=new ArrayDeque<>();
        q.add(new pair(src,-1));
        while(q.size()>0){
            pair rem=q.remove();
            if(vis[rem.v]!=0){
                if(vis[rem.v]==rem.c){
                    continue;
                }
                else{
                    return false;
                }
            }
            vis[rem.v]=rem.c;
            for(int nbr:graph[rem.v]){
                if(vis[nbr]==0){
                    q.add(new pair(nbr,rem.c*-1));
                }
            }
        }
        
        return true;
        
    }
