 public class pair{
        int r;
        int c;
        int x;
        pair(int r,int c,int x){
            this.r=r;
            this.c=c;
            this.x=x;
        }
    }
    public int[][] updateMatrix(int[][] mat) {
        
    //nt[][] ans=new int[mat.length][mat[0].length];
        boolean[][]vis=new boolean [mat.length][mat[0].length];
        ArrayDeque<pair> q=new ArrayDeque<>();
        for(int i=0;i<mat.length;i++){
            for(int j=0;j<mat[0].length;j++){
                if(mat[i][j]==0){
                    q.add(new pair(i,j,0));
                }
            }
        }
    //    int x=0;
        while(q.size()>0){
            pair curr=q.remove();
          //  System.out.println(curr.r+" "+curr.c+" "+curr.x);
            if(vis[curr.r][curr.c]==true){
                continue;
            }
         else{
                vis[curr.r][curr.c]=true;
               //rr.r][curr.c]=curr.x;
             mat[curr.r][curr.c]=curr.x;
                
                //putting 4 directions
                if(curr.r+1<mat.length && vis[curr.r+1][curr.c]==false){
                q.add(new pair(curr.r+1,curr.c,curr.x+1));
                }
                if(curr.r-1>=0 && vis[curr.r-1][curr.c]==false){
                     q.add(new pair(curr.r-1,curr.c,curr.x+1)); 
                }
                 if(curr.c-1>=0 && vis[curr.r][curr.c-1]==false){
                     q.add(new pair(curr.r,curr.c-1,curr.x+1)); 
                }
                 if(curr.c+1<mat[0].length && vis[curr.r][curr.c+1]==false){
                     q.add(new pair(curr.r,curr.c+1,curr.x+1)); 
                }
                
           
    }
        }
        
        
        return mat;
        
        
        
        
    }
