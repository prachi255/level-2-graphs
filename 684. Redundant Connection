https://leetcode.com/problems/redundant-connection/

   public class pair{
        int r;
        int c;
        pair(int r,int c){
            this.r=r;
            this.c=c;
        }
    }
    public int[] parent;
    public int[] rank;
    public int[] findRedundantConnection(int[][] edges) {
        //kind of kruskals
        //step 1. making pq{no need of pq bcz no as such criteria of weight}
        ArrayDeque<pair> q=new ArrayDeque<>();
        for(int i=0;i<edges.length;i++){
            pair x=new pair(edges[i][0],edges[i][1]);
            q.add(x);
        }
        //step 2:filling par and rank array
        parent=new int[edges.length+1];
        rank=new int[edges.length+1];
        for(int i=1;i<=edges.length;i++){
            parent[i]=i;
            rank[i]=0;
        }
        int[] ans=new int[2];
        parent[0]=-1;
        rank[0]=-1;
        //step 3:taking one by one from queue
        while(q.size()>0){
            pair curr=q.remove();
            int srclead=find(curr.r);
            int destlead=find(curr.c);
            if(srclead==destlead){
                ans[0]=curr.r;
                ans[1]=curr.c;
                return ans;
            }
            else{
                union(srclead,destlead);
            }
        }
      return new int[0];  
    }
    
    public int find(int x){
        if(parent[x]!=x){
            parent[x]=find(parent[x]);
        }
        return parent[x];
    }
    
    public void union(int sl,int dl){
        if(rank[sl]==rank[dl]){
            parent[sl]=dl;
            rank[dl]++;
        }
        else if(rank[sl]<rank[dl]){
            parent[sl]=dl;
        }
        else{
            parent[dl]=sl;
        }
    }
