https://leetcode.com/problems/minimize-malware-spread/

 public int minMalwareSpread(int[][] graph, int[] initial) {
        //first make union of components with graph
        int[]parent=new int [graph.length];
        int []size=new int [graph.length];
        Arrays.fill(size,1);
        for(int i=0;i<parent.length;i++){
            parent[i]=i;
        }
        
        for(int i=0;i<graph.length;i++){
            for(int j=0;j<graph.length;j++){
                if(graph[i][j]==1 && i!=j){
                    int parA=find(parent,i);
                    int parB=find(parent,j);
                    if(parA==parB){
                        continue;
                    }
                    union(parA,parB,size,parent);
                }
            }
        }
        int[]imap=new int[graph.length];
        for(int v:initial){
            int p=find(parent,v);
            imap[p]++;
        }
    //   for(int i:parent){
    //     System.out.print(i+" ");
    // }
    //     System.out.println();
    //     for(int i:imap){
    //         System.out.print(i+" "); 
    //     }
    //      System.out.println();
    //     for(int i:size){
    //          System.out.print(i+" ");
    //     }
        Arrays.sort(initial);
        int ans=initial[0];
        int ans_size=0;
        for(int i:initial){
            int head=find(parent,i);
            if(imap[head]==1 && size[head]>ans_size){
            ans=i;
                ans_size=size[head];
            }
        }
        print(size);
        
     return ans;   
        
    }
    public void print(int []arr){
        System.out.println("*");
    for(int i:arr){
        System.out.print(i+" ");
    }
       
    }
    public int find(int[]parent,int x){
        if(parent[x]==x){
            return x;
        }
        return parent[x]=find(parent,parent[x]);
    }
    public void union(int a,int b,int[]size,int[]parent){
    
       if(size[a]<size[b]){
            parent[a]=b;
           size[b]+=size[a];
         
        }
        else{
           parent[b]=a;
        
            size[a]+=size[b];
          
            
        }
    }
