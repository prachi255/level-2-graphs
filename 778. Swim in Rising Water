class pair implements Comparable<pair>{
        int i;
        int j;
        int tesf;
        pair(int i,int j,int t){
            this.i=i;
            this.j=j;
            this.tesf=t;
        }
        
      public  int compareTo(pair o){
            return this.tesf-o.tesf;
        }
        
    }
    public int swimInWater(int[][] grid) {
        int max=Integer.MIN_VALUE;
        PriorityQueue<pair> q=new PriorityQueue<>();
        boolean [][]vis=new boolean[grid.length][grid[0].length];
        q.add(new pair(0,0,grid[0][0]));
        while(q.size()>0){
            pair curr=q.remove();
            if(vis[curr.i][curr.j]==true){
                continue;
            }
            
            vis[curr.i][curr.j]=true;
            max=Math.max(max,curr.tesf);
            if(curr.i==grid.length-1 && curr.j==grid[0].length-1){
                return max;
            }
            
  if(curr.i+1<grid.length && vis[curr.i+1][curr.j]==false){
                q.add(new pair(curr.i+1,curr.j,Math.max(max,grid[curr.i+1][curr.j])));
                }
                if(curr.i-1>=0 && vis[curr.i-1][curr.j]==false){
                     q.add(new pair(curr.i-1,curr.j,Math.max(max,grid[curr.i-1][curr.j]))); 
                }
                 if(curr.j-1>=0 && vis[curr.i][curr.j-1]==false){
                     q.add(new pair(curr.i,curr.j-1,Math.max(max,grid[curr.i][curr.j-1]))); 
                }
                 if(curr.j+1<grid[0].length && vis[curr.i][curr.j+1]==false){
                     q.add(new pair(curr.i,curr.j+1,Math.max(max,grid[curr.i][curr.j+1]))); 
                }
        }
        
          return -1;
    }
    
