   public int orangesRotting(int[][] grid) {
        int[][]dir={{-1,0},{1,0},{0,-1},{0,1}};
        
        int time=0;
        Queue<pair> q=new ArrayDeque();
        //adding initial rotten oranges
        
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2){
                    q.add(new pair(i,j));
                }
            }
        }
        
        //travelling now
        while(q.size()>0){
            int size=q.size();
            while(size-->0){
                pair curr=q.remove();
                for(int i=0;i<4;i++){
                    int nr=curr.r+dir[i][0];
                    int nc=curr.c+dir[i][1];
                    
                    if(nr>=0 && nr<grid.length && nc>=0 && nc<grid[0].length && grid[nr][nc]==1){
                        grid[nr][nc]=2;
                        q.add(new pair(nr,nc));
                    }
                }
            }
            
            
            time++;
        }
        

        
           for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                return -1;
                }
            }
        }
        
        if(time==0){
            return 0;
        }
        return time-1;
        
        
        
        
        
    }
    class pair{
        int r;
        int c;
        pair(int r,int c){
            this.r=r;
            this.c=c;
        }
    }
