 class pair{
        int r;
        int c;
        int l;
        pair(int r,int c,int l){
            this.r=r;
            this.c=c;
            this.l=l;
        }
    }
    public int shortestBridge(int[][] grid) {
        boolean [][]vis=new boolean[grid.length][grid[0].length];
        boolean f=false;
        //dfs lagaakr ek comp dhudna
        ArrayDeque<pair> q=new ArrayDeque<>();
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==1){
                    dfs(i,j,grid,vis,q);
                    f=true;
                    break;
                }
            }
            if(f==true){
                break;
            }
        }
   boolean [][]vis2=new boolean[grid.length][grid[0].length];
        while(q.size()>0){
            pair curr=q.remove();
        if(vis2[curr.r][curr.c]==true){
            continue;
        }
            
            vis2[curr.r][curr.c]=true;
            if(grid[curr.r][curr.c]==1 ){
                return curr.l-1;
            }
            
            addN(grid,curr.r+1,curr.c,vis2,q,curr.l+1);
            addN(grid,curr.r-1,curr.c,vis2,q,curr.l+1);
            addN(grid,curr.r,curr.c+1,vis2,q,curr.l+1);
            addN(grid,curr.r,curr.c-1,vis2,q,curr.l+1);
            
            
        }
        
        return -1;
        
        
    }
    public void addN(int[][]grid,int r,int c,boolean[][]vis2,ArrayDeque<pair> q,int l){
        if(r>=grid.length || r<0 || c>=grid[0].length || c<0 || vis2[r][c]==true){
            return;
        }
        
        q.add(new pair(r,c,l));
    }
    
    public void dfs(int r,int c,int[][]grid,boolean[][]vis,ArrayDeque<pair> q){
        if(r>=grid.length || c>=grid[0].length || r<0 || c<0 ||  vis[r][c]==true || grid[r][c]!=1){
            return;
        }
    //    System.out.println(r+" "+c+" "+str);
        
        vis[r][c]=true;
        q.add(new pair(r,c,0));
        dfs(r+1,c,grid,vis,q);
        dfs(r-1,c,grid,vis,q);
        dfs(r,c+1,grid,vis,q);
        dfs(r,c-1,grid,vis,q);
        grid[r][c]=2;
    }
